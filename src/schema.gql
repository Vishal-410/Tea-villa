# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type User {
  id: String!
  firstName: String!
  lastName: String!
  email: String!
  phone: String!
  password: String!
  profileImage: String
  dateOfBirth: String
  gender: String
  addresses: [Address!]
  role: String
}

type Address {
  id: String!
  fullName: String!
  phone: String!
  pincode: String!
  city: String!
  state: String!
  country: String!
  street: String!
  landmark: String
  isDefault: Boolean!
}

type JwtAuthResponse {
  access_token: String!
  requires2FA: Boolean!
}

type Contactus {
  id: String!
  name: String!
  phone: String!
  email: String!
  message: String!
}

type Home {
  """Unique identifier for the homepage content"""
  id: String!

  """Image URL or path for the homepage content"""
  image: String!

  """Heading text for the homepage content"""
  heading: String!

  """List of paragraphs associated with the homepage content"""
  paragraphs: [Paragraph!]!

  """When the homepage content was created"""
  createdAt: DateTime!

  """When the homepage content was last updated"""
  updatedAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Paragraph {
  """Unique identifier for the paragraph"""
  id: String!

  """Text content of the paragraph"""
  text: String!
}

type Variant {
  id: String!
  size: String!
  price: Float!
}

type Product {
  id: String!
  name: String!
  collection: String!
  flavour: String!
  origin: String!
  qualities: [String!]!
  caffeine: String!
  allegens: [String!]!
  isOrganic: Boolean!
  isVegan: Boolean!
  variants: [Variant!]!
}

type ProductPaginationResponse {
  items: [Product!]!
  totalItems: Int!
  totalPages: Int!
  hasNextPage: Boolean!
}

type Cart {
  """Unique identifier for the cart"""
  id: String!
  userId: Int

  """List of items in the cart"""
  items: [CartItem!]!

  """When the cart was created"""
  createdAt: DateTime!

  """When the cart was last updated"""
  updatedAt: DateTime!
}

type CartItem {
  """Unique identifier for the cart item"""
  id: String!

  """ID of the variant being added to the cart"""
  variantId: String!

  """Quantity of the product variant"""
  quantity: Int!
}

type Blog {
  id: String!
  heading: String!
  image: String!
  paragraphs: [BlogParagraph!]!
}

type BlogParagraph {
  id: String!
  text: String!
}

type Wishlist {
  """Example field (placeholder)"""
  id: String!
}

type Coupoun {
  id: String!
  code: String!
  discount: Int!
  type: String!
  minimumAmount: Float
  size: String
  appliesToAll: Boolean!
  expiresAt: DateTime!
  isActive: Boolean!
  createdAt: DateTime!
  products: [Product!]
  variants: [Variant!]
}

type ApplyCouponResponse {
  valid: Boolean!
  message: String!
  discountAmount: Float
  finalAmount: Float
}

type Rating {
  id: String!
  rating: Float!
  review: String
  userId: String!
  productId: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Query {
  getProfile: User!
  logoutUser: Boolean!
  homes: [Home!]!
  home(id: String!): Home!
  products(pageNumber: Float!, pageSize: Float! = 5): ProductPaginationResponse!
  product(id: String!): Product!
  cartByUser(userId: String!): Cart!
  cartById(cartId: String!): Cart!
  blog(id: String!): Blog!
  wishlist: [Wishlist!]!
}

type Mutation {
  createUser(createUserInput: CreateUserInput!): User!
  forgotUserPassword(email: String!): User!
  changePassword(oldPassword: String!, newPassword: String!, confirmNewPassword: String!): User!
  updateProfile: User!
  updateAddress(updateUserAddressInput: UpdateUserAddressInput!): User!
  addAddress(updateUserAddressInput: CreateUserAddressInput!): User!
  makeDefaultAddress(addressFieldId: String!): User!
  removeUser: User!
  deleteAddress(addressId: String!): User!
  login(loginInput: LoginInput!): JwtAuthResponse!
  verifyOtp(email: String!, otp: String!): JwtAuthResponse!
  loginWithGoogle(idToken: String!): JwtAuthResponse!
  createContactus(createContactusInput: CreateContactusInput!): Contactus!
  createHome(createHomeInput: CreateHomeInput!): Home!
  createProduct(createProductInput: CreateProductInput!): Product!
  product(id: String!): Product!
  createCart(createCartInput: CreateCartInput!): Cart!
  mergeCart(guestCartId: String!): Boolean!
  removeItem(cartId: String!, variantId: String!): Cart!
  createBlog(createBlogInput: CreateBlogInput!): Blog!
  updateBlog(updateBlogInput: UpdateBlogInput!): Blog!
  removeBlog(id: String!): Blog!
  createWishlist(productId: String!): Wishlist!
  deleteAll: Boolean!
  removeWishlist(id: String!): Wishlist!
  createCoupon(input: CreateCouponInput!): Coupoun!
  applyCoupon(input: ApplyCouponInput!): ApplyCouponResponse!
  createOrder(input: CreateOrderInput!): String!
  createUpdateRating(createRatingInput: CreateRatingInput!): Rating!
  deleteRating(productId: String!): Rating!
}

input CreateUserInput {
  firstName: String!
  lastName: String!
  email: String!
  phone: String!
  password: String!
  profileImage: String
  dateOfBirth: String
  gender: String
  addresses: [CreateUserAddressInput!]
}

input CreateUserAddressInput {
  fullName: String!
  phone: String!
  pincode: String!
  city: String!
  state: String!
  country: String!
  street: String!
  landmark: String
  isDefault: Boolean! = false
}

input UpdateUserAddressInput {
  fullName: String
  phone: String
  pincode: String
  city: String
  state: String
  country: String
  street: String
  landmark: String
  isDefault: Boolean = false
  id: String!
}

input LoginInput {
  email: String!
  password: String!
}

input CreateContactusInput {
  name: String!
  phone: String!
  email: String!
  message: String!
}

input CreateHomeInput {
  """Image URL or path for the homepage content"""
  image: String!

  """Heading text for the homepage content"""
  heading: String!

  """List of paragraphs associated with the homepage content"""
  paragraphs: [CreateParagraphInput!]!

  """When the homepage content is created"""
  createdAt: DateTime!

  """When the homepage content is last updated"""
  updatedAt: DateTime!
}

input CreateParagraphInput {
  """Text content of the paragraph"""
  text: String!
}

input CreateProductInput {
  image: String!
  name: String!
  collection: String!
  flavour: String!
  origin: String!
  qualities: [String!]!
  caffeine: String!
  allegens: [String!]!
  isOrganic: Boolean!
  isVegan: Boolean!
  variants: [CreateVariantInput!]!
}

input CreateVariantInput {
  size: String!
  price: Float!
}

input CreateCartInput {
  cartId: String
  variantId: String!
  quantity: Int!
}

input CreateBlogInput {
  heading: String!
  image: String!
  paragraphs: [CreateBlogParagraphInput!]!
}

input CreateBlogParagraphInput {
  text: String!
}

input UpdateBlogInput {
  heading: String
  image: String
  paragraphs: [CreateBlogParagraphInput!]
  id: String!
}

input CreateCouponInput {
  code: String!
  discount: Int!
  type: String!
  minimumAmount: Float
  size: String
  appliesToAll: Boolean! = false
  expiresAt: DateTime!
  productIds: [String!]
  variantIds: [String!]
}

input ApplyCouponInput {
  couponCode: String!
  cartTotal: Float!
  productIds: [String!]
  variantIds: [String!]
}

input CreateOrderInput {
  amount: Int!
  currency: String! = "INR"
}

input CreateRatingInput {
  productId: String!
  rating: Float!
  review: String
}